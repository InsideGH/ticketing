apiVersion: apps/v1
kind: Deployment
metadata:
  name: tickets-mongo-depl
spec:
  replicas: 1
  # Selector works together with metadata
  # 'app' is just a key - could be anything
  # The selector/matchLabels tells what pods it should manage (find)
  selector:
    matchLabels:
      app: tickets-mongo
  # Metadata works together with selector
  # Specifies configuration for creating pods.
  template:
    metadata:
      labels:
        app: tickets-mongo
    spec:
      containers:
        - name: tickets-mongo
          # latest is default if not specified
          image: mongo
          volumeMounts:
            # select which volume that should be mounted into 'mountPath'
            - name: tickets-mongo-data
              # mount the volume/subPath into ->
              # This means that the volume root will have a subfolder 'postgres' where all content will be located
              # Without a subPath, there was no need to create the directory specified by PV spec.hostPath.path.
              # With a subPath, I had to create the directory(!?)
              # Reason for subPath is that Digital Ocean PV wasn't empty and postgres complained about it (lost&found folder).
              mountPath: /data/db
              subPath: mongo
      volumes:
        # name the volume so that it can be referenced above and specify the claim
        - name: tickets-mongo-data
          persistentVolumeClaim:
            claimName: tickets-mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: tickets-mongo-srv
spec:
  # Default is ClusterIP
  type: ClusterIP
  # Selector works together with DEPL.template.metadata.label
  selector:
    app: tickets-mongo
  ports:
      # the name is just for logging purposes, can be anything
    - name: tickets-mongo
      protocol: TCP
      # the port that Cluster is listening on
      port: 27017
      # the port that pod/container is listening on
      targetPort: 27017
